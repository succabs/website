---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";
import { Image } from "astro:assets";
import ScrollTopButton from "../../components/ScrollTopButton.astro";

const wordsPerMinute = 200;

const posts = (await getCollection("blog"))
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .map((post) => {
    const wordCount = post.body?.trim().split(/\s+/).length ?? 0;
    const readTime = Math.max(1, Math.round(wordCount / wordsPerMinute));
    return {
      ...post,
      data: {
        ...post.data,
        readTime,
      },
    };
  });

const postColors = ["blue", "red"];
const allTags = Array.from(
  new Set(posts.flatMap((p) => p.data.tags ?? []))
).sort();
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      title="Blog"
      description="Personal blog on life, tech and curiosity â€” from side projects to debugging deep dives."
    />
    <style>
      main {
        max-width: var(--max-width);
        margin-inline: auto;
        padding-inline: 64px;
        margin-block: 64px;
      }

      @media (max-width: 720px) {
        main {
          padding-inline: 32px;
        }
      }

      ul {
        display: flex;
        flex-wrap: wrap;
        gap: 64px;
        list-style-type: none;
        padding: 0;
        margin: 0;
      }

      ul li {
        width: calc(50% - 32px);
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        text-align: left;
      }

      ul li:first-child {
        width: 100%;
        text-align: center;
      }

      ul li:first-child img {
        width: 100%;
        height: auto;
        object-fit: cover;
        aspect-ratio: 16 / 9;
        margin-bottom: 1rem;
      }

      ul li:first-child .title {
        font-size: clamp(36px, 4vw, 56px);
        font-weight: 700;
        font-family: var(--font-heading);
      }

      .title {
        margin: 0.5rem 0 0.25rem;
        font-size: 24px;
        font-weight: 600;
        font-family: var(--font-heading);
        color: var(--accent);
        line-height: 1.2;
      }

      .date {
        font-size: 14px;
        color: var(--accent);
        margin: 0;
      }

      ul li a {
        text-decoration: none;
        color: inherit;
        display: block;
        width: 100%;
      }

      ul li img {
        width: 100%;
        height: auto;
        aspect-ratio: 16 / 9;
        object-fit: cover;
        margin-bottom: 1rem;
      }

      ul li a:hover .title {
        color: var(--accent);
      }

      ul li a:hover .date {
        color: var(--accent);
      }

      .post-red {
        --accent: var(--accent-red);
      }

      .post-blue {
        --accent: var(--accent-blue);
      }

      .post-yellow {
        --accent: var(--accent-yellow);
      }

      @media (max-width: 720px) {
        ul {
          gap: 32px;
        }

        ul li {
          width: 100%;
          text-align: left;
          align-items: flex-start;
        }

        .post-item {
          flex-direction: column;
        }

        .post-image {
          width: 100%;
          max-width: none;
        }

        ul li:first-child .title {
          font-size: 32px;
        }
      }

      .posts-list {
        display: flex;
        flex-direction: column;
        gap: 4rem;
        margin-top: 2rem;
      }

      .post-item {
        padding-bottom: 2rem;
        border-bottom: 1px solid var(--accent);
        display: flex;
        gap: 2rem;
        align-items: flex-start;
      }

      .post-content {
        flex: 1;
      }

      .post-image {
        width: 40%;
        max-width: 300px;
      }

      .post-image img {
        width: 100%;
        height: auto;
        aspect-ratio: 16 / 9;
        object-fit: cover;
      }

      .tag-list {
        margin: 0.5rem 0;
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
      }

      .post-title {
        font-family: var(--font-heading);
        font-weight: 700;
        text-transform: uppercase;
        margin: 1rem 0 0.5rem;
      }

      .post-title a {
        color: var(--accent);
        text-decoration: none;
      }

      .post-title a:hover {
        text-decoration: underline;
      }

      .post-date {
        font-family: var(--font-mono, monospace);
        font-size: 0.85rem;
        color: var(--accent);
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin-bottom: 1rem;
      }

      .post-excerpt {
        font-size: 1rem;
        color: var(--color-text, #333);
        line-height: 1.6;
        margin-bottom: 1rem;
      }

      .read-more {
        font-weight: 600;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.04em;
        color: var(--accent);
        text-decoration: none;
      }

      .read-more:hover {
        color: var(--color-text);
      }

      .page-description {
        margin: 0 0 1.5rem 0;
      }

      .filter-buttons {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-bottom: 2rem;
      }

      .filter-btn {
        font-family: var(--font-heading);
        text-transform: uppercase;
        font-size: 0.75rem;
        padding: 0.25em 0.5em;
        border: 2px solid var(--color-text);
        background: transparent;
        color: var(--color-text);
        cursor: pointer;
      }

      .filter-btn.active {
        background: var(--color-text);
        color: var(--color-bg);
      }

      .sort-control {
        margin-bottom: 2rem;
      }

      .sort-select {
        font-family: var(--font-heading);
        text-transform: uppercase;
        font-size: 0.75rem;
        padding: 0.25em 0.5em;
        border: 2px solid var(--color-text);
        background: transparent;
        color: var(--color-text);
      }

      .pagination {
        margin-top: 2rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
      }

      .load-more-btn {
        font-family: var(--font-heading);
        font-size: 0.75rem;
        padding: 0.5em 1em;
        border: 2px solid var(--color-text);
        background: transparent;
        color: var(--color-text);
        cursor: pointer;
      }

      .end-message {
        font-family: var(--font-heading);
        font-size: 0.75rem;
      }
    </style>
  </head>
</html>
<body class="page-blog page-red">
  <Header />
  <main class="content">
    <div class="corner-decoration top-left"></div>
    <div class="corner-decoration top-right"></div>
    <h1>Blog</h1>
    <p class="page-description">
      Occasional notes on tech, development, life and curious projects.
    </p>
    <hr />
    <div class="filter-buttons">
      <button class="filter-btn active" data-tag="all">All</button>
      {
        allTags.map((tag) => (
          <button class="filter-btn" data-tag={tag}>
            {tag}
          </button>
        ))
      }
    </div>
    <div class="sort-control">
      <label for="sort-select" class="sr-only">Sort posts</label>
      <select id="sort-select" class="sort-select">
        <option value="newest">Newest first</option>
        <option value="oldest">Oldest first</option>
      </select>
    </div>
    <section class="posts-list">
      {
        posts.map((post, idx) => (
          <article
            class={`post-item post-${postColors[idx % postColors.length]}`}
            data-tags={(post.data.tags ?? []).join(",")}
            data-date={post.data.pubDate.valueOf()}
          >
            <div class="post-content">
              <h2 class="post-title">
                <a href={`/blog/${post.id}/`}>{post.data.title}</a>
              </h2>

              {post.data.excerpt && (
                <p class="post-excerpt">{post.data.excerpt}</p>
              )}
              {post.data.tags && post.data.tags.length > 0 && (
                <div class="tag-list">
                  {post.data.tags.map((t) => (
                    <span class="tag" key={t}>
                      {t}
                    </span>
                  ))}
                </div>
              )}
              <p class="post-date">
                <FormattedDate date={post.data.pubDate} />
                <span class="read-time"> ðŸ•’ {post.data.readTime} min read</span>
              </p>
              <a href={`/blog/${post.id}/`} class="read-more">
                Read More â†’
              </a>
            </div>
            {post.data.heroImage && (
              <div class="post-image">
                <Image
                  width={300}
                  height={169}
                  src={post.data.heroImage}
                  alt={post.data.heroImageAlt ?? post.data.title}
                />
              </div>
            )}
          </article>
        ))
      }
    </section>
    <div class="pagination">
      <button id="load-more-btn" class="load-more-btn">Load more posts</button>
      <div id="end-message" class="end-message" style="display:none;">
        All posts are shown.
      </div>
    </div>
    <div id="load-more-trigger"></div>
  </main>
  <div id="cookie-banner" class="cookie-banner">
    <div>
      This site uses cookies to measure traffic with Google Analytics 4. Link to
      Google's privacy policy: <a href="https://policies.google.com/privacy"
        >https://policies.google.com/privacy</a
      >.
      <div style="padding-top: 0.5rem;">
        <button id="accept-cookies" class="cookie-button">Accept</button>
        <button id="reject-cookies" class="cookie-button cancel">Cancel</button>
      </div>
    </div>
  </div>
  <Footer />
  <ScrollTopButton />

  <script type="module">
    if (typeof window !== "undefined") {
      const postsPerPage = 5;
      const postsList = document.querySelector(".posts-list");
      let posts = Array.from(document.querySelectorAll(".post-item"));
      const filterButtons = document.querySelectorAll(".filter-btn");
      const loadMoreBtn = document.getElementById("load-more-btn");
      const endMessage = document.getElementById("end-message");
      const loadTrigger = document.getElementById("load-more-trigger");
      const sortSelect = document.getElementById("sort-select");
      let currentTag = "all";
      let sortOrder = "newest";
      let itemsShown = postsPerPage;

      if (sortSelect) {
        sortSelect.addEventListener("change", () => {
          sortOrder = sortSelect.value;
          sortPosts();
          resetAndUpdate();
        });
      }

      filterButtons.forEach((btn) => {
        btn.addEventListener("click", () => {
          filterButtons.forEach((b) => b.classList.remove("active"));
          btn.classList.add("active");
          currentTag = btn.dataset.tag || "all";
          resetAndUpdate();
        });
      });

      function sortPosts() {
        posts.sort((a, b) => {
          const aDate = Number(a.dataset.date);
          const bDate = Number(b.dataset.date);
          return sortOrder === "newest" ? bDate - aDate : aDate - bDate;
        });
        posts.forEach((p) => postsList.appendChild(p));
      }

      function update() {
        const visible = posts.filter((p) => {
          if (currentTag === "all") return true;
          const tags = p.dataset.tags ? p.dataset.tags.split(",") : [];
          return tags.includes(currentTag);
        });

        posts.forEach((p) => (p.style.display = "none"));
        visible.slice(0, itemsShown).forEach((p) => (p.style.display = ""));

        if (itemsShown >= visible.length) {
          loadMoreBtn.style.display = "none";
          endMessage.style.display = visible.length ? "block" : "none";
        } else {
          loadMoreBtn.style.display = "block";
          endMessage.style.display = "none";
        }
      }

      function resetAndUpdate() {
        itemsShown = postsPerPage;
        update();
      }

      loadMoreBtn?.addEventListener("click", () => {
        itemsShown += postsPerPage;
        update();
      });

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting && loadMoreBtn?.style.display !== "none") {
              itemsShown += postsPerPage;
              update();
            }
          });
        },
        { rootMargin: "0px 0px 200px 0px" }
      );
      if (loadTrigger) observer.observe(loadTrigger);

      sortPosts();
      update();

      const pageMap = {
        "/": "home",
        "/experience": "experience",
        "/projects": "projects",
        "/skills": "skills",
        "/about": "about",
        "/blog": "blog",
      };

      const path = window.location.pathname.replace(/\/$/, "");
      const key = pageMap[path];

      if (key) {
        const storageKey = "visitedPages";
        const stored = JSON.parse(localStorage.getItem(storageKey) || "{}");
        stored[key] = true;
        localStorage.setItem(storageKey, JSON.stringify(stored));
      }
    }
  </script>
</body><script is:inline>
  const banner = document.getElementById("cookie-banner");
  const accept = document.getElementById("accept-cookies");
  const reject = document.getElementById("reject-cookies");

  // Initialize dataLayer
  window.dataLayer = window.dataLayer || [];

  // Define gtag function
  function gtag() {
    dataLayer.push(arguments);
  }

  // Aina sivulatauksessa â€“ jos suostumus on annettu aiemmin, pÃ¤ivitÃ¤ consent
  if (localStorage.getItem("cookiesAccepted") === "true") {
    gtag("consent", "update", {
      ad_storage: "granted",
      analytics_storage: "granted",
    });
  }

  if (banner && localStorage.getItem("cookiesAccepted")) {
    banner.style.display = "none";
  }

  if (banner && accept && reject && !localStorage.getItem("cookiesAccepted")) {
    banner.style.display = "block";

    accept.addEventListener("click", () => {
      gtag("consent", "update", {
        ad_storage: "granted",
        analytics_storage: "granted",
      });
      localStorage.setItem("cookiesAccepted", "true");
      banner.style.display = "none";
    });

    reject.addEventListener("click", () => {
      // Ei muuta consenteja, mutta voi halutessa estÃ¤Ã¤ uudelleen esiin tulemisen:
      localStorage.setItem("cookiesAccepted", "rejected");
      banner.style.display = "none";
    });
  }
</script>
